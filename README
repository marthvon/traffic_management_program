## Synopsis

Final Assessment of Data Structures and Algorithms - DSA1002

It takes in a csv file or a text file using ',' as delimeters to 
create a graph network. It uses the raw data to interpret the
shortest path or best paht between a source to its destination.
Therefore, it contributes in creating simulations that can assists 
in dynamically managing traffic and optimising traffic flow
Additionally, it assists in analysing traffic management strategies 
by sorting traffic data to show the intersections with the highest 
expected traffic volume. Hence, it is a valuable resource in helping
deploy traffic control measures

How To Use?

A Test Harness can be used to test the data in the "traffic_data.txt"
and "traffic_network.txt". Command => "java TestHarness.java <... options>".
This throws IncorrectShortestPathError, RetrieveNoneExistingPathError, and 
PrioritisedTrafficControlError if the test harness fails the assertions

Test Harness Manual
Options:
        -q      Quiet. Doesn't display stdout to console but only stderr from assertions
        -d      Display Road Intersection Information in Detail, otherwise print minimally
        -l      Print out the Traffic Network Adjacency List
        -p      Print sorted Traffic Data Intersections from Highest to Lowest Traffic Volume
        -s<... optional>        Print the Best Path between Source and Destination
        default         Best Path is based on the intersection Overall Weight
                t       Best Path is based on the intersection Traffic Factor
                m       Best Path is based on the intersection Distance in Miles
                v       Best Path is based on the intersection Traffic Volume
        -a      When '-s' is flagged, it also prints other non optimal paths

Also, "bash sweep.sh" can be ran to sweep the Test Harness to output text files of
the network adjacency list, the shortest path of every path to every other path, and
the best path to take based on the traffic_data, additionally it outputs the priority
queue based on the intersection with the most traffic volume. All the output is stored
in the "./docs/" directory


The Traffic Menu is an user-friendly console interface to manipulate the traffic network
to create simulations and perform all the above features in the Test Harness.
Command => "java TrafficMenu.java"

Traffic Management Program, include features of:
    1. Display Traffic Network Adjacency List
    2. Find Path from Two Locations
    3. Display Intersection in order of Traffic Volume
    4. Add New Road
    5. Add New Intersection
    6. Toggle Display Traffic Data in Detail

Running 'bash sweep.sh' produces the following files:

adjacency_list.txt                      - Prints the adjacency list of the network
adjacency_list_in_detail.txt            - Prints the adjacency list of the network along with the intersection traffic data
best_path.txt                           - Prints the best path base on the equation (distance*congestion_lvl*traffic_vol/road_cap)
best_path_in_detail.txt                 - Prints the best path base on the equation (distance*congestion_lvl*traffic_vol/road_cap) 
                                          with the traffic data information
high_traffic_volume_priority_list.txt   - Prints the list of intersections prioritising high traffic volume
shortest_path.txt                       - Print the shortest path base on miles
shortest_path_in_detail.txt             - Print the shortest path base on miles with traffic data information

Within, the docs folder executing 'bash find_diff.sh' creates a 'path_difference.txt' listing the paths with different optimized/best path
from the path generated from the shortest path

## Contents

README - readme file for Final Assessment
CustomTypes/CustomException/IncorrectShortestPathError.java
CustomTypes/CustomException/RetrieveNoneExistingPathError.java
CustomTypes/CustomException/PrioritisedTrafficControlError.java
CustomTypes/CustomException/ConflictingKeyException.java
CustomTypes/CustomException/EmptyListException.java
CustomTypes/CustomException/NonExistentNodeLabel.java
CustomTypes/DSA_GraphMatrix.java
CustomTypes/DSA_HeapMax.java
CustomTypes/DSA_HeapEntry.java
CustomTypes/DoubleEndedLinkedList.java
CustomTypes/DoublyLinkedList.java
CustomTypes/HashEntry.java
CustomTypes/HashMap.java
CustomTypes/IDSA_Graph.java
CustomTypes/ILinkedList.java
CustomTypes/SingleEndedLinkedList.java
TestHarness.java
TrafficFlow.java
TrafficData.java
TrafficMenu.java
TrafficNetwork.java
traffic_data.txt
traffic_network.txt
sweep.sh

## Author

name: Mamert Vonn G. Santelices
id:   90026174

## Dependencies

Linux OS
openjdk 19.0.2
OpenJDK Runtime Environment
OpenJDK 64-Bit Server VM

## Version Information

19/01/2024 - final version of final assessment

Curtin College
Bentley